@page "/themes"
@inject ThemeLinkService ThemeService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4" Elevation="4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <MudText Typo="Typo.h5">Themes</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OpenCloneDialog" />
    </div>
    @if (_groupedThemes != null)
    {
        foreach (var group in _groupedThemes)
        {
            <MudText Typo="Typo.h6" Class="mt-4">@group.Key</MudText>
            <MudTable Items="group" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Pfad</MudTh>
                    <MudTh>Link</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Pfad">@context.Path</MudTd>
                    <MudTd DataLabel="Link">@(context.LinkExists ? "Ja" : "Nein")</MudTd>
                    <MudTd>
                        @if (context.LinkExists)
                        {
                            <MudButton Size="Size.Small" Color="Color.Error" OnClick="() => Remove(context)">Entfernen</MudButton>
                        }
                        else
                        {
                            <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => Create(context)">Anlegen</MudButton>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    }
</MudPaper>

@code {
    private IEnumerable<IGrouping<string, ThemeInfo>>? _groupedThemes;

    protected override void OnInitialized()
    {
        Load();
    }

    private void Load()
    {
        _groupedThemes = ThemeService.GetThemes()
            .GroupBy(t => t.Repo)
            .OrderBy(g => g.Key)
            .ToList();
    }

    private void Create(ThemeInfo info)
    {
        ThemeService.CreateLink(info);
        Snackbar.Add($"Link für {info.Name} erstellt.", Severity.Success);
        Load();
    }

    private void Remove(ThemeInfo info)
    {
        ThemeService.RemoveLink(info);
        Snackbar.Add($"Link für {info.Name} entfernt.", Severity.Success);
        Load();
    }

    private async Task OpenCloneDialog()
    {
        var dlg = DialogService.Show<CloneThemeDialog>("Repo klonen");
        var result = await dlg.Result;
        if (!result.Cancelled)
        {
            Snackbar.Add("Repository geklont.", Severity.Success);
            Load();
        }
    }
}
