@page "/"
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SettingsService SettingsService
@implements IDisposable

<div class="row">
    <div class="col-3">
        <MudSelect Value="Settings.IisAppName" ValueChanged="@((string? s) => SettingsService.Save(s))" Label="IIS App" Variant="Variant.Filled" Class="mb-2">
            @foreach (var site in manager.Sites)
            {
                if (site != null)
                {
                    <MudSelectItem Value="@site.Name">@site.Name</MudSelectItem>
                }
            }
        </MudSelect>

        <MudStack Row="false" Spacing="2">
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="StartIisApp">Start</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="StopIisApp">Stop</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RestartIisApp">Neustart</MudButton>
        </MudStack>

    </div>
    <div class="col-9">
        <div class="row mb-3">
            <div class="col-5"></div>
            <div class="col-2">
                <MudSelect T="LogLevel" Value="_selectedLevel" ValueChanged="@((LogLevel l) => LoadLogs(l))" Label="Ebene">
                    @foreach (var level in Enum.GetValues<LogLevel>())
                    {
                        <MudSelectItem Value="@level">@level.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-2">
                <MudSelect T="ReloadOption" Value="_logOptions" ValueChanged="@((ReloadOption l) => LoadLogs(l))" Label="Zeitpunkt">
                    @foreach (var level in Enum.GetValues<ReloadOption>())
                    {
                        <MudSelectItem Value="@level">@level.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-2">
                <MudSelect T="double" Value="_refreshSeconds" ValueChanged="@((double l) => HandleTimer(l))" Label="Logs neu laden">
                    @foreach (var reloadTime in ReloadTime.ReloadTimes)
                    {
                        <MudSelectItem Value="@reloadTime.Value.TotalSeconds">@reloadTime.Key</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-1">
                <MudIconButton Icon="@Icons.Material.Filled.Autorenew" OnClick="LoadLogs"></MudIconButton>
            </div>
        </div>
        @if (_logs.Any())
        {
            <MudTable Items="_logs" Hover="true" OnRowClick="@((TableRowClickEventArgs<LogEntry> t) => ShowLogDetails(t))">
                <HeaderContent>
                    <MudTh>Zeit</MudTh>
                    <MudTh>Ebene</MudTh>
                    <MudTh>Nachricht</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Zeit">@context.Time</MudTd>
                    <MudTd DataLabel="Ebene">
                        <MudChip T="string" Color="@GetColor(context.Level)" Icon="@GetIcon(context.Level)" Variant="Variant.Filled">@context.Level</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Nachricht">@context.Message</MudTd>
                </RowTemplate>
            </MudTable>

        }
        else
        {
            <div class="row">
                <div class="col d-flex align-items-center justify-content-center">
                    <MudAlert Class="w-100">Keine Logs gefunden.</MudAlert>
                </div>
            </div>
        }

    </div>
</div>

@code {
    private readonly TimeSpan RestartDelay = TimeSpan.FromSeconds(3);

    private void StartIisApp()
    {
        try
        {
            using var manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Start();
            Snackbar.Add($"Anwendung {Settings.IisAppName} gestartet.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Starten: {ex.Message}", Severity.Error);
        }
    }

    private void StopIisApp()
    {
        try
        {
            manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Stop();
            Snackbar.Add($"Anwendung '{Settings.IisAppName}' gestoppt.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Stoppen: {ex.Message}", Severity.Error);
        }
    }

    private async Task RestartIisApp()
    {
        StopIisApp();
        await Task.Delay(RestartDelay);
        StartIisApp();
        _lastShopRestart = DateTime.Now;
        LoadLogs();
    }

    // Log viewer fields
    private LogService _logService = default!;
    private IEnumerable<LogEntry> _logs = Enumerable.Empty<LogEntry>();
    private LogLevel _selectedLevel = LogLevel.All;
    private bool _autoRefresh;
    private int _refreshSeconds;
    private bool _onlySinceRestart;
    private DateTime _lastShopRestart = AppInfo.StartTime;
    private System.Timers.Timer? _timer;
    private ReloadOption _logOptions = ReloadOption.SeitStartDerAnwendung;
    private ServerManager manager = new ServerManager();

    protected override void OnInitialized()
    {
        if (SettingsService.IsConfigured)
        {
            ApplySettings();
        }
        else
        {
            ShowSettingsDialog();
        }
    }

    private void ApplySettings()
    {
        _logService = new LogService(Settings.LogName!);
        _autoRefresh = Settings.AutoRefreshEnabled;
        _refreshSeconds = Settings.AutoRefreshSeconds;
        _onlySinceRestart = Settings.OnlySinceRestart;
        _logOptions = _onlySinceRestart ? ReloadOption.SeitLetztemNeuladen : ReloadOption.SeitStartDerAnwendung;
        if (Settings.LoadOnStartup)
        {
            LoadLogs();
        }
        StartTimer();
    }

    private void HandleTimer(double seconds)
    {
        _refreshSeconds = (int)seconds;
        if(_refreshSeconds <= 0)
        {
            _autoRefresh = false;
        }
        else
        {
            _autoRefresh = true;
        }
        StartTimer();
    }
    
    private void ShowSettingsDialog()
    {
        var dialog = DialogService.Show<SettingsDialog>("Einstellungen");
        dialog.Result.ContinueWith(_ => InvokeAsync(() => ApplySettings()));
    }

    private void LoadLogs()
    {
        var since = _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;
        _logs = _logService.GetLogs(since, _selectedLevel);
    }
    
    private void LoadLogs(LogLevel logLevel)
    {
        var since = _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;
        _selectedLevel = logLevel;
        _logs = _logService.GetLogs(since, logLevel);
    }
    
    private void LoadLogs(ReloadOption logLevel)
    {
        _logOptions = logLevel;
        if (logLevel == ReloadOption.SeitStartDerAnwendung)
        {
            _onlySinceRestart = false;
        }
        else if (logLevel == ReloadOption.SeitLetztemNeuladen)
        {
            _onlySinceRestart = true;
        }
        var since = logLevel == ReloadOption.AlleLogs ? DateTime.MinValue  : _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;
        _logs = _logService.GetLogs(since, _selectedLevel);
    }

    private void StartTimer()
    {
        _timer?.Dispose();
        if (_autoRefresh)
        {
            _timer = new System.Timers.Timer(_refreshSeconds * 1000);
            _timer.Elapsed += async (_, _) =>
            {
                await InvokeAsync(() =>
                {
                    LoadLogs();
                    StateHasChanged();
                });
            };
            _timer.AutoReset = true;
            _timer.Start();
        }
    }

    private void ToggleAutoRefresh(bool value)
    {
        _autoRefresh = value;
        StartTimer();
    }

    private void IntervalChanged(int value)
    {
        if (value <= 0) return;
        _refreshSeconds = value;
        StartTimer();
    }

    private void ShowLogDetails(TableRowClickEventArgs<LogEntry> args)
    {
        var parameters = new DialogParameters { [nameof(LogEntryDialog.Entry)] = args.Item };
        DialogService.Show<LogEntryDialog>("Log Details", parameters);
    }

    private Color GetColor(LogLevel level) => level switch
    {
        LogLevel.Information => Color.Info,
        LogLevel.Warning => Color.Warning,
        LogLevel.Error => Color.Error,
        LogLevel.Critical => Color.Error,
        _ => Color.Default
    };

    private string GetIcon(LogLevel level) => level switch
    {
        LogLevel.Information => Icons.Material.Filled.Info,
        LogLevel.Warning => Icons.Material.Filled.Warning,
        LogLevel.Error => Icons.Material.Filled.Error,
        LogLevel.Critical => Icons.Material.Filled.PriorityHigh,
        _ => Icons.Material.Filled.Info

    };
    private ToolboxSettings Settings => SettingsService.Settings;

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
