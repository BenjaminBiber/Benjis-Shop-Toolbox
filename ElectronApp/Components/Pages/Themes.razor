@page "/themes"
@using System.Diagnostics
@using Benjis_Shop_Toolbox.Models
@using Benjis_Shop_Toolbox.Services
@using ElectronApp.Components.Dialogs
@using Microsoft.Web.Administration
@using MudBlazor
@inject ThemeLinkService ThemeService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SettingsService SettingsService
@inject SolutionOpener SolutionOpener

<MudPaper Class="pa-4" Elevation="4">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <MudText Typo="Typo.h5">Themes</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="OpenCloneDialog" />
    </div>
    <MudSelect T="string" Value="_selectedSite" ValueChanged="OnSiteChanged" Label="Shop" Variant="Variant.Filled" Class="mb-4">
        @foreach (var site in Settings.SiteSettings.Where(s => s.IsShop))
        {
            <MudSelectItem Value="@site.Name">@site.Name</MudSelectItem>
        }
    </MudSelect>
    @if (_isLoading)
    {
        <div class="d-flex justify-content-center my-3">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        </div>
    }
    else if (_groupedThemes != null)
    {
        foreach (var group in _groupedThemes)
        {
            <MudText Typo="Typo.h6" Class="mt-2">@group.Key</MudText>
            <MudTable Items="group" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Pfad</MudTh>
                    <MudTh>Link</MudTh>
                    <MudTh></MudTh>
                    <MudTh>Wird im Shop verwendet</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Pfad">@context.Path</MudTd>
                    <MudTd DataLabel="Link">@(context.LinkExists ? "Ja" : "Nein")</MudTd>
                    <MudTd>
                        @if (context.LinkExists)
                        {
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Error" OnClick="@(async () => await Remove(context))">Entfernen</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary" OnClick="@(async () => await Create(context))">Anlegen</MudButton>
                        }
                    </MudTd>
                    <MudTd>
                        <MudCheckBox Disabled="context.IsThemeOverwrite || !context.LinkExists" Value="context.IsThemeOverwrite" ValueChanged="@(async (bool t) => await ThemeOverwriteChanged(context))" Color="Color.Primary" />
                    </MudTd>
                    <MudTd>
                        <MudMenu Icon="@Icons.Material.Filled.OpenInNew">
                            <MudMenuItem OnClick="@(() => OpenDirectoryInExplorer(context.Path))" Label="Explorer" />
                            <MudMenuItem OnClick="@(() => OpenSolution(context))" Label="Rider" />
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    }
</MudPaper>

@code {
    private IEnumerable<IGrouping<string, ThemeInfo>>? _groupedThemes;
    private bool _isLoading;
    private string? _selectedSite;
    private ToolboxSettings Settings => SettingsService.Settings;
    private SiteSetting? SelectedSetting => Settings.SiteSettings.FirstOrDefault(s => s.Name == _selectedSite);

    private async Task OnSiteChanged(string? name)
    {
        _selectedSite = name;
        await LoadAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var first = Settings.SiteSettings.FirstOrDefault(s => s.IsShop);
        if (first != null)
        {
            _selectedSite = first.Name;
        }
        await LoadAsync();
    }

    public static void OpenDirectoryInExplorer(string path)
    {
        if (Directory.Exists(path))
        {
            Process.Start("explorer.exe", path);
        }
        else
        {
            Console.WriteLine("Ordner existiert nicht: " + path);
        }
    }
    
    private void OpenSolution(ThemeInfo info)
    {
        Snackbar.Add($"{info.Name} wird in Rider geöffnet...", Severity.Info);
        SolutionOpener.OpenSolutionInRider(info.ThemeFolder);
    }
    
    private async Task LoadAsync()
    {
        _isLoading = true;
        StateHasChanged();
        var setting = SelectedSetting;
        if (setting == null)
        {
            _groupedThemes = null;
            _isLoading = false;
            StateHasChanged();
            return;
        }
        _groupedThemes = await Task.Run(() => ThemeService.GetThemes(setting.ShopThemesPath ?? string.Empty, setting.ShopYamlPath ?? string.Empty)
            .GroupBy(t => t.Repo)
            .OrderBy(g => g.Key)
            .ToList());
        _isLoading = false;
        StateHasChanged();
    }

    private void Load()
    {
        var setting = SelectedSetting;
        if (setting == null)
        {
            _groupedThemes = null;
            return;
        }
        _groupedThemes = ThemeService.GetThemes(setting.ShopThemesPath ?? string.Empty, setting.ShopYamlPath ?? string.Empty)
            .GroupBy(t => t.Repo)
            .OrderBy(g => g.Key)
            .ToList();
    }

    private async Task ThemeOverwriteChanged(ThemeInfo info)
    {
        _isLoading = true;
        StateHasChanged();
        try
        {
            var setting = SelectedSetting;
            if (setting == null) return;
            var result = ThemeService.SetThemeOverwrite(setting.ShopYamlPath ?? string.Empty, info);
            if (result)
            {
                await LoadAsync();
                if (Settings.RestartShopOnThemeChange)
                {
                    await RestartIisApp();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Ändern der Theme-Überschreibung: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
    
    private TimeSpan RestartDelay =>
        TimeSpan.FromSeconds(Math.Max(1, Settings.RestartDelaySeconds));
    
    private void StartIisApp()
    {
        try
        {
            using var manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Start();
            Snackbar.Add($"Anwendung {Settings.IisAppName} gestartet.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Starten: {ex.Message}", Severity.Error);
        }
    }

    private void StopIisApp()
    {
        try
        {
            var manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Stop();
            Snackbar.Add($"Anwendung '{Settings.IisAppName}' gestoppt.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Stoppen: {ex.Message}", Severity.Error);
        }
    }

    private async Task RestartIisApp()
    {
        StopIisApp();

        RecycleAppPool(Settings.IisAppName);

        await Task.Delay(RestartDelay);
        StartIisApp();
    }
    
    private void RecycleAppPool(string appPoolName)
    {
        try
        {
            using var manager = new ServerManager();
            var pool = manager.ApplicationPools.FirstOrDefault(p => p.Name == appPoolName);
            if (pool == null)
            {
                Snackbar.Add($"AppPool '{appPoolName}' nicht gefunden.", Severity.Warning);
                return;
            }

            if (pool.State == ObjectState.Stopped)
                pool.Start();
            else
                pool.Recycle();

            Snackbar.Add($"AppPool '{appPoolName}' recycelt.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim AppPool-Recycling: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task Create(ThemeInfo info)
    {
        var setting = SelectedSetting;
        if (setting == null) return;
        ThemeService.CreateLink(setting.ShopThemesPath ?? string.Empty, info);
        await LoadAsync();
    }

    private async Task Remove(ThemeInfo info)
    {
        var setting = SelectedSetting;
        if (setting == null) return;
        ThemeService.RemoveLink(setting.ShopThemesPath ?? string.Empty, info);
        await LoadAsync();
    }

    private async Task OpenCloneDialog()
    {
        var parameters = new DialogParameters();
        var setting = SelectedSetting;
        if (setting != null)
        {
            parameters.Add("ShopYamlPath", setting.ShopYamlPath ?? string.Empty);
            parameters.Add("ShopThemesPath", setting.ShopThemesPath ?? string.Empty);
        }
        var dlg = DialogService.Show<CloneThemeDialog>("Repo klonen", parameters);
        var result = await dlg.Result;
        if (!result.Canceled)
        {
            await LoadAsync();
        }
    }
}
