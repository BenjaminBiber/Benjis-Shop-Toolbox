@page "/shop"
@using Benjis_Shop_Toolbox.Models
@using Benjis_Shop_Toolbox.Services
@using ElectronNET.API.Entities
@inject SettingsService SettingsService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">Shop Einstellungen</MudText>
    <MudSelect T="string" Value="_selectedSite" ValueChanged="OnSiteChanged" Label="Shop" Variant="Variant.Filled" Class="mb-4">
        @foreach (var site in Settings.SiteSettings.Where(s => s.IsShop))
        {
            <MudSelectItem Value="@site.Name">@site.Name</MudSelectItem>
        }
    </MudSelect>

    @if (_config != null)
    {
        <MudTextField @bind-Value="_config.ShopId" Label="ShopId" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.UserId" Label="UserId" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.BaseTheme" Label="BaseTheme" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ThemeOverwrite" Label="ThemeOverwrite" Variant="Variant.Filled" Class="mb-2" />

        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6" Class="mb-2">Application Configuration</MudText>
        <MudTextField @bind-Value="_config.ApplicationConfiguration.CacheMode" Label="CacheMode" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ApplicationConfiguration.ApplicationType" Label="ApplicationType" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ApplicationConfiguration.DatabaseTpe" Label="DatabaseType" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ApplicationConfiguration.DatabaseVersion" Label="DatabaseVersion" Variant="Variant.Filled" Class="mb-2" />

        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6" Class="mb-2">Database Connections</MudText>
        @if (_config.DatabaseConnections != null)
        {
            @for (int i = 0; i < _config.DatabaseConnections.Count; i++)
            {
                var conn = _config.DatabaseConnections[i];
                <MudPaper Class="pa-2 mb-2" Elevation="2">
                    <div class="d-flex justify-content-between align-items-start">
                        <MudText Typo="Typo.subtitle2">Verbindung @(i + 1)</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveConnection(i))" />
                    </div>
                    <MudTextField @bind-Value="conn.Server" Label="Server" Variant="Variant.Outlined" Class="mb-2" />
                    <MudTextField @bind-Value="conn.Database" Label="Database" Variant="Variant.Outlined" Class="mb-2" />
                    <MudTextField @bind-Value="conn.User" Label="User" Variant="Variant.Outlined" Class="mb-2" />
                    <MudTextField @bind-Value="conn.Password" Label="Password" Variant="Variant.Outlined" Class="mb-2" />
                    <MudNumericField T="int" @bind-Value="conn.MaxPoolSize" Label="MaxPoolSize" Variant="Variant.Outlined" Class="mb-2" />
                    <MudSwitch @bind-Value="conn.Encrypt" Color="Color.Primary" Class="mb-2">Encrypt</MudSwitch>
                    <MudSwitch @bind-Value="conn.TrustServerCertificate" Color="Color.Primary" Class="mb-2">TrustServerCertificate</MudSwitch>
                </MudPaper>
            }
        }
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddConnection" Class="mb-4">Verbindung hinzuf√ºgen</MudButton>

        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6" Class="mb-2">Weitere Einstellungen</MudText>
        <MudTextField @bind-Value="_config.Extensions.Directory" Label="Extensions Directory" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.MainAssembly.AssemblyName" Label="AssemblyName" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.LicenseService.Address" Label="LicenseService Address" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ApiConnection.Url" Label="Api Url" Variant="Variant.Filled" Class="mb-2" />
        <MudTextField @bind-Value="_config.ApiConnection.Token" Label="Api Token" Variant="Variant.Filled" Class="mb-2" />

        <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4">Speichern</MudButton>
    }
    else if (!string.IsNullOrEmpty(_selectedSite))
    {
        <MudAlert Severity="Severity.Info" Class="mt-2">shop.yaml nicht gefunden.</MudAlert>
    }
</MudPaper>

@code {
    private string? _selectedSite;
    private ZionConfiguration? _config;
    private ToolboxSettings Settings => SettingsService.Settings;

    protected override void OnInitialized()
    {
        var firstShop = Settings.SiteSettings.FirstOrDefault(s => s.IsShop);
        if (firstShop != null)
        {
            _selectedSite = firstShop.Name;
            LoadConfig();
        }
    }

    private void OnSiteChanged(string? name)
    {
        _selectedSite = name;
        LoadConfig();
    }

    private void LoadConfig()
    {
        _config = null;
        if (string.IsNullOrEmpty(_selectedSite))
            return;
        var info = Settings.SiteSettings.FirstOrDefault(s => s.Name == _selectedSite);
        if (info != null && !string.IsNullOrEmpty(info.ShopYamlPath) && File.Exists(info.ShopYamlPath))
        {
            _config = ShopYamlLoader.LoadConfiguration(info.ShopYamlPath);
            _config.DatabaseConnections ??= new List<DatabaseConnection>();
        }
    }

    private void AddConnection()
    {
        if (_config == null) return;
        _config.DatabaseConnections ??= new List<DatabaseConnection>();
        _config.DatabaseConnections.Add(new DatabaseConnection());
    }

    private void RemoveConnection(int index)
    {
        if (_config?.DatabaseConnections == null) return;
        if (index >= 0 && index < _config.DatabaseConnections.Count)
        {
            _config.DatabaseConnections.RemoveAt(index);
        }
    }

    private void Save()
    {
        if (_config == null || string.IsNullOrEmpty(_selectedSite))
            return;
        var info = Settings.SiteSettings.FirstOrDefault(s => s.Name == _selectedSite);
        if (info == null || string.IsNullOrEmpty(info.ShopYamlPath))
        {
            Snackbar.Add("Kein Pfad zur shop.yaml konfiguriert", Severity.Error);
            return;
        }
        try
        {
            var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                .WithNamingConvention(YamlDotNet.Serialization.NamingConventions.CamelCaseNamingConvention.Instance)
                .Build();
            var root = new ZionRoot { ZionConfiguration = _config };
            var yaml = serializer.Serialize(root);
            File.WriteAllText(info.ShopYamlPath, yaml);
            Snackbar.Add("shop.yaml gespeichert", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
        }
    }
}
