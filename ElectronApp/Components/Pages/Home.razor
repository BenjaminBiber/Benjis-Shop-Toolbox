@page "/"
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject SettingsService SettingsService
@using Benjis_Shop_Toolbox.Models
@using Benjis_Shop_Toolbox.Services
@using ElectronApp.Components.Dialogs
@using ElectronApp.Models
@using Microsoft.Web.Administration
@using MudBlazor
@implements IDisposable

<div class="row h-100">
    <div class="col-12 col-lg-3">
        <div class="row mb-3 mb-lg-0">
            <div class="col-4 col-lg-10">
                @{
                    var color = String.IsNullOrEmpty(Settings.IisAppName) ? Color.Default : GetColor();
                }
                <MudBadge Overlap="true" Dot="true" Class="w-100" Origin="Origin.TopRight" Color="color">
                    <MudSelect Value="Settings.IisAppName" ValueChanged="@((string? s) => SettingsService.Save(s))" Label="IIS App" Variant="Variant.Outlined" Class="mb-2 mt-2">
                        @foreach (var site in manager.Sites)
                        {
                            if (site != null)
                            {
                                <MudSelectItem Value="@site.Name">@site.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudBadge>
            </div>
            <div class="col-4 col-lg-1 d-flex align-items-center justify-content-start justify-content-lg-center">
                <MudMenu Icon="@Icons.Material.Filled.OpenInNew" Class="mx-0 my-0" AriaLabel="Ã–ffne IIS App im Browser">
                    @if(!String.IsNullOrEmpty(Settings.IisAppName))
                    {
                        @foreach (var binding in manager.Sites[Settings.IisAppName]?.Bindings ?? Enumerable.Empty<Binding>())
                        {
                            var url = GetSiteUrl(binding);
                            if (url != null)
                            {
                                <MudMenuItem OnClick="@(() => OpenInBrowser(url))" Label="@url" />
                            }
                        }
                    }
                </MudMenu>
            </div>
            <div class="col-4 d-flex justify-content-evenly align-items-center d-lg-none">
                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Start" Variant="Variant.Filled" OnClick="StartIisApp">Start</MudIconButton>
                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.RestartAlt" Variant="Variant.Filled" OnClick="RestartIisApp">Neustart</MudIconButton>
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" OnClick="StopIisApp">Stop</MudIconButton>
            </div>
        </div>
        
        <MudStack Row="false" Class="d-none d-lg-flex mr-17" Spacing="2">
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Start" Variant="Variant.Filled" OnClick="StartIisApp">Start</MudButton>
            <MudButton Color="Color.Warning" StartIcon="@Icons.Material.Filled.RestartAlt" Variant="Variant.Filled" OnClick="RestartIisApp">Neustart</MudButton>
            <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" OnClick="StopIisApp">Stop</MudButton>
        </MudStack>
    </div>
    <div class="col-12 col-lg-9 h-100">
        <div class="row mb-3">
            <div class="col-3">
                <MudTextField Variant="Variant.Text" @bind-Value="_searchText" Immediate="true" Label="Suche" Class="w-100"/>
            </div>
            <div class="col-2">
                <MudSelect T="MessageType" MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionTextMessage))" SelectedValues="_selectedMessageTypes" SelectedValuesChanged="@(async levels => await SelectedLevelsChanged(levels))" Label="LogMeldung">
                    @foreach (var level in Enum.GetValues<MessageType>())
                    {
                        <MudSelectItem Value="@level">@level.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-2">
                <MudSelect T="LogLevel" MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" SelectedValues="_selectedLevels" SelectedValuesChanged="@(async levels => await SelectedLevelsChanged(levels))" Label="Ebene">
                    @foreach (var level in Enum.GetValues<LogLevel>().Where(l => l != LogLevel.All))
                    {
                        <MudSelectItem Value="@level">@level.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-2">
                <MudSelect T="ReloadOption" Value="_logOptions" ValueChanged="@(async (ReloadOption l) => await LoadLogs(l))" Label="Zeitpunkt">
                    @foreach (var level in Enum.GetValues<ReloadOption>())
                    {
                        <MudSelectItem Value="@level">@level.GetDescription()</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-2">
                <MudSelect T="double" Value="_refreshSeconds" ValueChanged="@((double l) => HandleTimer(l))" Label="Logs neu laden">
                    @foreach (var reloadTime in ReloadTime.ReloadTimes)
                    {
                        <MudSelectItem Value="@reloadTime.Value.TotalSeconds">@reloadTime.Key</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="col-1">
                <MudIconButton Icon="@Icons.Material.Filled.Autorenew" OnClick="@(async () => await LoadLogs())"></MudIconButton>
            </div>
        </div>
        @if (_isLoading)
        {
            <div class="position-absolute d-flex justify-content-center my-3">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </div>
        }
        @if (DisplayLogs.Any())
        {
            <MudTable Style="height: 85dvh" Height="95%" FixedFooter="true" FixedHeader="true" Items="DisplayLogs" Hover="true" OnRowClick="@((TableRowClickEventArgs<LogEntry> t) => ShowLogDetails(t))">
                <HeaderContent>
                    <MudTh>Zeit</MudTh>
                    <MudTh>Ebene</MudTh>
                    <MudTh>Nachricht</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Zeit">@context.Time</MudTd>
                    <MudTd DataLabel="Ebene">
                        <MudChip T="string" Color="@GetColor(context.Level)" Icon="@GetIcon(context.Level)" Variant="Variant.Filled">@context.Level</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Nachricht">
                        @Highlight(context.ParsedMessage.GetFormattedMessage(_selectedMessageTypes))
                        @if (context.Count > 1)
                        {
                            <span class="ms-1">(x@context.Count)</span>
                        }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 50, 100, int.MaxValue }"
                                   RowsPerPageString="Logs pro Seite"
                                   InfoFormat="{first_item}-{last_item} von {all_items}"
                                   AllItemsText="Alle"
                                   HorizontalAlignment="HorizontalAlignment.Right"/>
                </PagerContent>
            </MudTable>
        }
        else
        {
            <div class="row">
                <div class="col d-flex align-items-center justify-content-center">
                    <MudAlert Class="w-100">Keine Logs gefunden.</MudAlert>
                </div>
            </div>
        }

    </div>
</div>

@code {
    private readonly TimeSpan RestartDelay = TimeSpan.FromSeconds(3);

    private void StartIisApp()
    {
        try
        {
            using var manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Start();
            Snackbar.Add($"Anwendung {Settings.IisAppName} gestartet.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Starten: {ex.Message}", Severity.Error);
        }
    }

    private void StopIisApp()
    {
        try
        {
            manager = new Microsoft.Web.Administration.ServerManager();
            if (string.IsNullOrWhiteSpace(Settings.IisAppName)) return;
            var site = manager.Sites[Settings.IisAppName];
            site?.Stop();
            Snackbar.Add($"Anwendung '{Settings.IisAppName}' gestoppt.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Stoppen: {ex.Message}", Severity.Error);
        }
    }

    public async Task RestartIisApp()
    {
        StopIisApp();

        RecycleAppPool(Settings.IisAppName);

        await Task.Delay(RestartDelay);
        StartIisApp();

        _lastShopRestart = DateTime.Now;
        await LoadLogs();
    }

    
    private void RecycleAppPool(string appPoolName)
    {
        try
        {
            using var manager = new ServerManager();
            var pool = manager.ApplicationPools.FirstOrDefault(p => p.Name == appPoolName);
            if (pool == null)
            {
                Snackbar.Add($"AppPool '{appPoolName}' nicht gefunden.", Severity.Warning);
                return;
            }

            if (pool.State == ObjectState.Stopped)
                pool.Start();
            else
                pool.Recycle();

            Snackbar.Add($"AppPool '{appPoolName}' recycelt.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim AppPool-Recycling: {ex.Message}", Severity.Error);
        }
    }
    
    // Log viewer fields
    private LogService _logService = default!;
    private IEnumerable<LogEntry> _logs = Enumerable.Empty<LogEntry>();
    private HashSet<LogLevel> _selectedLevels = Enum.GetValues<LogLevel>()
        .Where(l => l != LogLevel.All)
        .ToHashSet();
    private HashSet<MessageType> _selectedMessageTypes = Enum.GetValues<MessageType>().ToHashSet();
    private bool _autoRefresh;
    private int _refreshSeconds;
    private bool _onlySinceRestart;
    private DateTime _lastShopRestart = AppInfo.StartTime;
    private System.Timers.Timer? _timer;
    private ReloadOption _logOptions = ReloadOption.SeitStartDerAnwendung;
    private ServerManager manager = new ServerManager();
    private string _searchText = string.Empty;
    private bool _isLoading;
    private ReloadOption reload;
    
    private DateTime SelectedSince => _logOptions == ReloadOption.AlleLogs
        ? DateTime.MinValue
        : _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;

    private IEnumerable<LogEntry> FilteredLogs => _logs
        .Where(l => l.Time >= SelectedSince)
        .Where(l => _selectedLevels.Count == 0 || _selectedLevels.Contains(l.Level))
        .Where(l => string.IsNullOrWhiteSpace(_searchText)
            || l.Message.Contains(_searchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<LogEntry> DisplayLogs => Settings.BundleLogs
        ? BundleLogs(FilteredLogs)
        : FilteredLogs;

    private static IEnumerable<LogEntry> BundleLogs(IEnumerable<LogEntry> logs)
    {
        LogEntry? current = null;
        foreach (var log in logs)
        {
            if (current != null && log.Message == current.Message && log.Level == current.Level)
            {
                current.Count += log.Count;
            }
            else
            {
                if (current != null)
                {
                    yield return current;
                }
                current = new LogEntry
                {
                    Time = log.Time,
                    Level = log.Level,
                    Message = log.Message,
                    Count = log.Count,
                    ParsedMessage = log.ParsedMessage
                };
            }
        }
        if (current != null)
        {
            yield return current;
        }
    }

    private MarkupString Highlight(string message)
    {
        if (string.IsNullOrWhiteSpace(_searchText))
        {
            return (MarkupString)System.Net.WebUtility.HtmlEncode(message);
        }

        var encoded = System.Net.WebUtility.HtmlEncode(message);
        var pattern = System.Text.RegularExpressions.Regex.Escape(_searchText);
        var highlighted = System.Text.RegularExpressions.Regex.Replace(encoded, pattern,
            m => $"<mark>{m.Value}</mark>", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return (MarkupString)highlighted;
    }

    protected override async Task OnInitializedAsync()
    {
        if (SettingsService.IsConfigured)
        {
            await ApplySettings();
        }
        else
        {
            ShowSettingsDialog();
        }
    }

    public string GetSiteUrl(Binding binding)
    {
        var protocol = binding.Protocol;

        var parts = binding.BindingInformation.Split(':');

        if (parts.Length != 3)
        {
            return null;
        }

        string ip = parts[0];
        string port = parts[1];
        string host = binding.Host;

        string domain = !string.IsNullOrEmpty(host)
            ? host
            : (ip == "*" || ip == "0.0.0.0" ? "localhost" : ip);

        bool isDefaultPort = (protocol == "http" && port == "80") || (protocol == "https" && port == "443");

        string url = $"{protocol}://{domain}";

        if (!isDefaultPort)
            url += $":{port}";

        return url;
    }
    
    private async Task ApplySettings()
    {
        _logService = new LogService(Settings.LogName!);
        _autoRefresh = Settings.AutoRefreshEnabled;
        _refreshSeconds = Settings.AutoRefreshSeconds;
        _onlySinceRestart = Settings.OnlySinceRestart;
        _logOptions = _onlySinceRestart ? ReloadOption.SeitLetztemNeuladen : ReloadOption.SeitStartDerAnwendung;
        if (Settings.LoadOnStartup)
        {
            await LoadLogs();
        }
        StartTimer();
    }

    private void HandleTimer(double seconds)
    {
        _refreshSeconds = (int)seconds;
        if(_refreshSeconds <= 0)
        {
            _autoRefresh = false;
        }
        else
        {
            _autoRefresh = true;
        }
        StartTimer();
    }
    
    private void ShowSettingsDialog()
    {
        var dialog = DialogService.Show<SettingsDialog>("Einstellungen");
        dialog.Result.ContinueWith(_ => InvokeAsync(async () => await ApplySettings()));
    }

    private async Task LoadLogs()
    {
        _isLoading = true;
        StateHasChanged();
        var since = reload == ReloadOption.AlleLogs ? DateTime.MinValue  : _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;
        _logs = await Task.Run(() => _logService.GetLogs(since, LogLevel.All));
        _isLoading = false;
        StateHasChanged();
    }

    private async Task SelectedLevelsChanged(IEnumerable<LogLevel> levels)
    {
        _selectedLevels = levels.ToHashSet();
        await LoadLogs();
    }
    
    private async Task SelectedLevelsChanged(IEnumerable<MessageType> levels)
    {
        _selectedMessageTypes = levels.ToHashSet();
        StateHasChanged();
    }

    private async Task LoadLogs(ReloadOption logLevel)
    {
        reload = logLevel;
        _isLoading = true;
        StateHasChanged();
        _logOptions = logLevel;
        if (logLevel == ReloadOption.SeitStartDerAnwendung)
        {
            _onlySinceRestart = false;
        }
        else if (logLevel == ReloadOption.SeitLetztemNeuladen)
        {
            _onlySinceRestart = true;
        }
        var since = logLevel == ReloadOption.AlleLogs ? DateTime.MinValue  : _onlySinceRestart ? _lastShopRestart : AppInfo.StartTime;
        _logs = await Task.Run(() => _logService.GetLogs(since, LogLevel.All));
        _isLoading = false;
        StateHasChanged();
    }

    private void StartTimer()
    {
        _timer?.Dispose();
        if (_autoRefresh)
        {
            _timer = new System.Timers.Timer(_refreshSeconds * 1000);
            _timer.Elapsed += async (_, _) =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadLogs();
                    StateHasChanged();
                });
            };
            _timer.AutoReset = true;
            _timer.Start();
        }
    }

    private void ToggleAutoRefresh(bool value)
    {
        _autoRefresh = value;
        StartTimer();
    }

    private void IntervalChanged(int value)
    {
        if (value <= 0) return;
        _refreshSeconds = value;
        StartTimer();
    }   

    private void ShowLogDetails(TableRowClickEventArgs<LogEntry> args)
    {
        var parameters = new DialogParameters<LogEntryDialog> { {x => x.Entry, args.Item} };
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            BackdropClick = true,
        };
        DialogService.Show<LogEntryDialog>("", parameters, options);
    }

    private Color GetColor(LogLevel level) => level switch
    {
        LogLevel.Information => Color.Info,
        LogLevel.Warning => Color.Warning,
        LogLevel.Error => Color.Error,
        LogLevel.Critical => Color.Error,
        _ => Color.Default
    };

    private Color GetColor() => manager.Sites[Settings.IisAppName].State switch
    {
        ObjectState.Started => Color.Success,
        ObjectState.Starting => Color.Warning,
        ObjectState.Stopped => Color.Error,
        ObjectState.Stopping => Color.Warning,
        _ => Color.Default
    };

    private string GetIcon(LogLevel level) => level switch
    {
        LogLevel.Information => Icons.Material.Filled.Info,
        LogLevel.Warning => Icons.Material.Filled.Warning,
        LogLevel.Error => Icons.Material.Filled.Error,
        LogLevel.Critical => Icons.Material.Filled.PriorityHigh,
        _ => Icons.Material.Filled.Info

    };
    private ToolboxSettings Settings => SettingsService.Settings;

    public void Dispose()
    {
        _timer?.Dispose();
    }
    
    private string GetMultiSelectionTextMessage(List<string> selectedValues)
    {
        if (Enum.GetValues<MessageType>().Count() == selectedValues.Count)
        {
            return "Ganze LogMeldungen";
        }
        else if (selectedValues.Count == 0)
        {
            return "Keine LogMeldung ausgewÃ¤hlt";
        }
        else
        {
            return string.Join(", ", selectedValues.Select(v => Enum.Parse<MessageType>(v).GetDescription()));
        }
    }
    
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (Enum.GetValues<LogLevel>().Where(l => l != LogLevel.All).Count() == selectedValues.Count)
        {
            return LogLevel.All.GetDescription();
        }
        else if (selectedValues.Count == 0)
        {
            return "Keine Ebene ausgewÃ¤hlt";
        }
        else
        {
            return string.Join(", ", selectedValues.Select(v => Enum.Parse<LogLevel>(v).GetDescription()));
        }
    }

    void OpenInBrowser(string url)
    {
        try
        {
            var psi = new System.Diagnostics.ProcessStartInfo
            {
                FileName = url,
                UseShellExecute = true // Wichtig: Ã¶ffnet im Standard-Browser
            };
            System.Diagnostics.Process.Start(psi);
        }
        catch (Exception ex)
        {
            // Optional: Fehlerbehandlung
            Console.WriteLine($"Fehler beim Ã–ffnen: {ex.Message}");
        }
    }

}
